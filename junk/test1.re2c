// re2c $INPUT -o $OUTPUT
#include <cassert>
#include <cstdio>
#include <fstream>
#include <sstream>
#include <iostream>

static void convert_newlines(FILE * in, std::ostringstream &out)
{
    size_t mar;
loop:
    /*!re2c
        re2c:yyfill:enable = 0;
        re2c:flags:input = custom;
        re2c:api:style = free-form;
        re2c:define:YYCTYPE   = char;
        re2c:define:YYPEEK    = "({char c = fgetc(in); ungetc(c, in); c; })";
        re2c:define:YYSKIP    = "({ fgetc(in); if (feof(in)) { return; } });";
        re2c:define:YYBACKUP  = "mar = ftell(in);";
        re2c:define:YYRESTORE = "fseek(in, mar, SEEK_SET);";

        *      { out.put(yych); goto loop; }
        "\r\n" { out.put('\n'); goto loop; }
    */
}

int main()
{
    const char *fname = "/tmp/input";
    const char s1[] = "Text\r\nwith\r\nnewlines.\r\n\r\n";
    const char s2[] = "Text\nwith\nnewlines.\n\n";

    std::ofstream f(fname, std::ios::binary);
    f.write(s1, sizeof(s1) - 1);
    f.close();

    FILE* in2 = fopen(fname, "r");

    std::ifstream in(fname, std::ios::binary);
    std::ostringstream out;
    convert_newlines(in2, out);
    assert(out.str() == s2);
    std::cout << out.str();

    remove(fname);
    return 0;
}